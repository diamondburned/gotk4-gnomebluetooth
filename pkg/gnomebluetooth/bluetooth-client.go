// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// extern void callbackDelete(gpointer);
// gboolean _gotk4_gtk3_TreeModelFilterVisibleFunc(GtkTreeModel*, GtkTreeIter*, gpointer);
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.bluetooth_client_get_type()), F: marshalClienter},
	})
}

// Client: <structname>BluetoothClient</structname> struct contains only private
// fields and should not be directly accessed.
type Client struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Client)(nil)
)

func wrapClient(obj *externglib.Object) *Client {
	return &Client{
		Object: obj,
	}
}

func marshalClienter(p uintptr) (interface{}, error) {
	return wrapClient(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewClient returns a reference to the Client singleton. Use g_object_unref()
// when done with the object.
//
// The function returns the following values:
//
//    - client: Client object.
//
func NewClient() *Client {
	var _cret *C.BluetoothClient // in

	_cret = C.bluetooth_client_new()

	var _client *Client // out

	_client = wrapClient(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _client
}

// ConnectService: when the connection operation is finished, callback will be
// called. You can then call bluetooth_client_connect_service_finish() to get
// the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - path: object path on which to operate.
//    - connect: whether try to connect or disconnect from services on a device.
//    - callback (optional) to call when the connection is complete.
//
func (client *Client) ConnectService(ctx context.Context, path string, connect bool, callback gio.AsyncReadyCallback) {
	var _arg0 *C.BluetoothClient    // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.gboolean            // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_arg1))
	if connect {
		_arg2 = C.TRUE
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.bluetooth_client_connect_service(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(client)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(path)
	runtime.KeepAlive(connect)
	runtime.KeepAlive(callback)
}

// ConnectServiceFinish finishes the connection operation. See
// bluetooth_client_connect_service().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (client *Client) ConnectServiceFinish(res gio.AsyncResulter) error {
	var _arg0 *C.BluetoothClient // out
	var _arg1 *C.GAsyncResult    // out
	var _cerr *C.GError          // in

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.bluetooth_client_connect_service_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(client)
	runtime.KeepAlive(res)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AdapterModel returns a TreeModelFilter with only adapters present.
//
// The function returns the following values:
//
//    - treeModel: TreeModel object.
//
func (client *Client) AdapterModel() gtk.TreeModeller {
	var _arg0 *C.BluetoothClient // out
	var _cret *C.GtkTreeModel    // in

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))

	_cret = C.bluetooth_client_get_adapter_model(_arg0)
	runtime.KeepAlive(client)

	var _treeModel gtk.TreeModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.TreeModeller)
			return ok
		})
		rv, ok := casted.(gtk.TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_treeModel = rv
	}

	return _treeModel
}

// DeviceModel returns a TreeModelFilter with only devices belonging to the
// default adapter listed. Note that the model will follow a specific adapter,
// and will not follow the default adapter. Also note that due to the way
// TreeModelFilter works, you will probably want to monitor signals on the
// "child-model" TreeModel to monitor for changes.
//
// The function returns the following values:
//
//    - treeModel: TreeModel object.
//
func (client *Client) DeviceModel() gtk.TreeModeller {
	var _arg0 *C.BluetoothClient // out
	var _cret *C.GtkTreeModel    // in

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))

	_cret = C.bluetooth_client_get_device_model(_arg0)
	runtime.KeepAlive(client)

	var _treeModel gtk.TreeModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.TreeModeller)
			return ok
		})
		rv, ok := casted.(gtk.TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_treeModel = rv
	}

	return _treeModel
}

// FilterModel returns a TreeModelFilter of devices filtered using the func,
// data and destroy arguments to pass to
// gtk_tree_model_filter_set_visible_func().
//
// The function takes the following parameters:
//
//    - fn: TreeModelFilterVisibleFunc.
//
// The function returns the following values:
//
//    - treeModel: TreeModel object.
//
func (client *Client) FilterModel(fn gtk.TreeModelFilterVisibleFunc) gtk.TreeModeller {
	var _arg0 *C.BluetoothClient              // out
	var _arg1 C.GtkTreeModelFilterVisibleFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify
	var _cret *C.GtkTreeModel // in

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))
	_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeModelFilterVisibleFunc)
	_arg2 = C.gpointer(gbox.Assign(fn))
	_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_cret = C.bluetooth_client_get_filter_model(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(client)
	runtime.KeepAlive(fn)

	var _treeModel gtk.TreeModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.TreeModeller)
			return ok
		})
		rv, ok := casted.(gtk.TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_treeModel = rv
	}

	return _treeModel
}

// Model returns an unfiltered TreeModel representing the adapter and devices
// available on the system.
//
// The function returns the following values:
//
//    - treeModel: TreeModel object.
//
func (client *Client) Model() gtk.TreeModeller {
	var _arg0 *C.BluetoothClient // out
	var _cret *C.GtkTreeModel    // in

	_arg0 = (*C.BluetoothClient)(unsafe.Pointer(client.Native()))

	_cret = C.bluetooth_client_get_model(_arg0)
	runtime.KeepAlive(client)

	var _treeModel gtk.TreeModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.TreeModeller)
			return ok
		})
		rv, ok := casted.(gtk.TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_treeModel = rv
	}

	return _treeModel
}
