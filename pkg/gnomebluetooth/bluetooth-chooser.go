// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// extern void _gotk4_gnomebluetooth1_ChooserClass_selected_device_activated(BluetoothChooser*, char*);
// extern void _gotk4_gnomebluetooth1_ChooserClass_selected_device_changed(BluetoothChooser*, char*);
// extern void _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceActivated(gpointer, gchar*, guintptr);
// extern void _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceChanged(gpointer, gchar*, guintptr);
import "C"

// glib.Type values for bluetooth-chooser.go.
var GTypeChooser = externglib.Type(C.bluetooth_chooser_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeChooser, F: marshalChooser},
	})
}

// ChooserOverrider contains methods that are overridable.
type ChooserOverrider interface {
	// The function takes the following parameters:
	//
	SelectedDeviceActivated(address string)
	// The function takes the following parameters:
	//
	SelectedDeviceChanged(address string)
}

// Chooser: <structname>BluetoothChooser</structname> struct contains only
// private fields and should not be directly accessed.
type Chooser struct {
	_ [0]func() // equal guard
	gtk.Box
}

var (
	_ gtk.Containerer     = (*Chooser)(nil)
	_ externglib.Objector = (*Chooser)(nil)
)

func classInitChooserer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.BluetoothChooserClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.BluetoothChooserClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ SelectedDeviceActivated(address string) }); ok {
		pclass.selected_device_activated = (*[0]byte)(C._gotk4_gnomebluetooth1_ChooserClass_selected_device_activated)
	}

	if _, ok := goval.(interface{ SelectedDeviceChanged(address string) }); ok {
		pclass.selected_device_changed = (*[0]byte)(C._gotk4_gnomebluetooth1_ChooserClass_selected_device_changed)
	}
}

//export _gotk4_gnomebluetooth1_ChooserClass_selected_device_activated
func _gotk4_gnomebluetooth1_ChooserClass_selected_device_activated(arg0 *C.BluetoothChooser, arg1 *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SelectedDeviceActivated(address string) })

	var _address string // out

	_address = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.SelectedDeviceActivated(_address)
}

//export _gotk4_gnomebluetooth1_ChooserClass_selected_device_changed
func _gotk4_gnomebluetooth1_ChooserClass_selected_device_changed(arg0 *C.BluetoothChooser, arg1 *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SelectedDeviceChanged(address string) })

	var _address string // out

	_address = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.SelectedDeviceChanged(_address)
}

func wrapChooser(obj *externglib.Object) *Chooser {
	return &Chooser{
		Box: gtk.Box{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: gtk.Orientable{
				Object: obj,
			},
		},
	}
}

func marshalChooser(p uintptr) (interface{}, error) {
	return wrapChooser(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceActivated
func _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceActivated(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(address string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(address string))
	}

	var _address string // out

	_address = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_address)
}

// ConnectSelectedDeviceActivated signal is launched when a device is
// double-clicked in the chooser.
func (self *Chooser) ConnectSelectedDeviceActivated(f func(address string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(self, "selected-device-activated", false, unsafe.Pointer(C._gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceActivated), f)
}

//export _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceChanged
func _gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(address string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(address string))
	}

	var _address string // out

	_address = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_address)
}

// ConnectSelectedDeviceChanged signal is launched when the selected device is
// changed, it will be NULL if a device was unselected.
func (self *Chooser) ConnectSelectedDeviceChanged(f func(address string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(self, "selected-device-changed", false, unsafe.Pointer(C._gotk4_gnomebluetooth1_Chooser_ConnectSelectedDeviceChanged), f)
}

// NewChooser returns a new Chooser widget.
//
// The function returns the following values:
//
//    - chooser: Chooser widget.
//
func NewChooser() *Chooser {
	var _cret *C.GtkWidget // in

	_cret = C.bluetooth_chooser_new()

	var _chooser *Chooser // out

	_chooser = wrapChooser(externglib.Take(unsafe.Pointer(_cret)))

	return _chooser
}

// DumpSelectedDevice prints all the known attributes for the currently selected
// device on the standard output. Useful for debugging.
func (self *Chooser) DumpSelectedDevice() {
	var _arg0 *C.BluetoothChooser // out

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	C.bluetooth_chooser_dump_selected_device(_arg0)
	runtime.KeepAlive(self)
}

// ScrolledWindow returns the ScrolledWindow object for the Chooser. This is
// useful to set a minimum height to the chooser using
// gtk_scrolled_window_set_min_content_height() or to join the chooser with a
// toolbar.
//
// The function returns the following values:
//
//    - widget: ScrolledWindow object.
//
func (self *Chooser) ScrolledWindow() gtk.Widgetter {
	var _arg0 *C.BluetoothChooser // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_scrolled_window(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.Widgetter)
			return ok
		})
		rv, ok := casted.(gtk.Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// SelectedDevice returns the Bluetooth address for the currently selected
// device.
//
// The function returns the following values:
//
//    - utf8: bluetooth address for the currently selected device, or NULL.
//
func (self *Chooser) SelectedDevice() string {
	var _arg0 *C.BluetoothChooser // out
	var _cret *C.char             // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_selected_device(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SelectedDeviceIcon returns the icon name to use to represent the currently
// selected device.
//
// The function returns the following values:
//
//    - utf8: icon name to use to represent the currently selected device, or
//      NULL.
//
func (self *Chooser) SelectedDeviceIcon() string {
	var _arg0 *C.BluetoothChooser // out
	var _cret *C.char             // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_selected_device_icon(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SelectedDeviceInfo returns whether the value has been set.
//
// The function takes the following parameters:
//
//    - field: identifier for the field to get data for.
//    - value: empty #GValue to set.
//
// The function returns the following values:
//
//    - ok: TRUE if the value has been set.
//
func (self *Chooser) SelectedDeviceInfo(field string, value *externglib.Value) bool {
	var _arg0 *C.BluetoothChooser // out
	var _arg1 *C.char             // out
	var _arg2 *C.GValue           // out
	var _cret C.gboolean          // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(field)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.bluetooth_chooser_get_selected_device_info(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(field)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectedDeviceIsConnected returns whether the selected device is connected to
// this computer.
//
// The function returns the following values:
//
//    - ok: whether the selected device is connected to this computer, will
//      always be FALSE if no devices are selected.
//
func (self *Chooser) SelectedDeviceIsConnected() bool {
	var _arg0 *C.BluetoothChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_selected_device_is_connected(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectedDeviceName returns the name for the currently selected device.
//
// The function returns the following values:
//
//    - utf8: name for the currently selected device, or NULL.
//
func (self *Chooser) SelectedDeviceName() string {
	var _arg0 *C.BluetoothChooser // out
	var _cret *C.char             // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_selected_device_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SelectedDeviceType returns the Type of the device selected.
//
// The function returns the following values:
//
//    - typ of the device selected, or '0' if unknown.
//
func (self *Chooser) SelectedDeviceType() Type {
	var _arg0 *C.BluetoothChooser // out
	var _cret C.BluetoothType     // in

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.bluetooth_chooser_get_selected_device_type(_arg0)
	runtime.KeepAlive(self)

	var _typ Type // out

	_typ = Type(_cret)

	return _typ
}

// StartDiscovery starts a discovery on the default Bluetooth adapter. Note that
// this will only work if the Search label is visible, as otherwise the user has
// no visual feedback that the process is on-going.
//
// See also: Chooser:show-searching.
func (self *Chooser) StartDiscovery() {
	var _arg0 *C.BluetoothChooser // out

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	C.bluetooth_chooser_start_discovery(_arg0)
	runtime.KeepAlive(self)
}

// StopDiscovery stops a discovery started with
// #bluetooth_chooser_start_discovery.
func (self *Chooser) StopDiscovery() {
	var _arg0 *C.BluetoothChooser // out

	_arg0 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(self).Native()))

	C.bluetooth_chooser_stop_discovery(_arg0)
	runtime.KeepAlive(self)
}
