// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// glib.Type values for bluetooth-filter-widget.go.
var GTypeFilterWidget = externglib.Type(C.bluetooth_filter_widget_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeFilterWidget, F: marshalFilterWidget},
	})
}

// FilterWidgetOverrider contains methods that are overridable.
type FilterWidgetOverrider interface {
}

type FilterWidget struct {
	_ [0]func() // equal guard
	gtk.Box
}

var (
	_ gtk.Containerer     = (*FilterWidget)(nil)
	_ externglib.Objector = (*FilterWidget)(nil)
)

func classInitFilterWidgetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapFilterWidget(obj *externglib.Object) *FilterWidget {
	return &FilterWidget{
		Box: gtk.Box{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: gtk.Orientable{
				Object: obj,
			},
		},
	}
}

func marshalFilterWidget(p uintptr) (interface{}, error) {
	return wrapFilterWidget(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFilterWidget creates a new FilterWidget which can be bound to a Chooser to
// control filtering of that Chooser. Usually used in conjunction with a Chooser
// which has the "has-internal-filter" property set to FALSE.
//
// The function returns the following values:
//
//    - filterWidget widget
//
//      Note: Must call bluetooth_filter_widget_bind_filter () to bind the
//      FilterWidget to a Chooser.
//
func NewFilterWidget() *FilterWidget {
	var _cret *C.GtkWidget // in

	_cret = C.bluetooth_filter_widget_new()

	var _filterWidget *FilterWidget // out

	_filterWidget = wrapFilterWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _filterWidget
}

// BindFilter binds a FilterWidget to a Chooser such that changing the
// FilterWidget results in filters being applied on the Chooser. Any properties
// set on a bound Chooser will also be set on the FilterWidget.
//
// The function takes the following parameters:
//
//    - chooser widget to bind the filter to.
//
func (filter *FilterWidget) BindFilter(chooser *Chooser) {
	var _arg0 *C.BluetoothFilterWidget // out
	var _arg1 *C.BluetoothChooser      // out

	_arg0 = (*C.BluetoothFilterWidget)(unsafe.Pointer(externglib.InternObject(filter).Native()))
	_arg1 = (*C.BluetoothChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	C.bluetooth_filter_widget_bind_filter(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(chooser)
}

// SetTitle: used to set a different title for the FilterWidget than the
// default.
//
// The function takes the following parameters:
//
//    - title: title for the FilterWidget.
//
func (filter *FilterWidget) SetTitle(title string) {
	var _arg0 *C.BluetoothFilterWidget // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.BluetoothFilterWidget)(unsafe.Pointer(externglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.bluetooth_filter_widget_set_title(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(title)
}
