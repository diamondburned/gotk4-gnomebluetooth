// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.bluetooth_chooser_button_get_type()), F: marshalChooserButtonner},
	})
}

// ChooserButtonOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ChooserButtonOverrider interface {
	// The function takes the following parameters:
	//
	ChooserCreated(chooser gtk.Widgetter)
}

// ChooserButton: <structname>BluetoothChooserButton</structname> struct
// contains only private fields and should not be directly accessed.
type ChooserButton struct {
	_ [0]func() // equal guard
	gtk.Button
}

var (
	_ gtk.Binner          = (*ChooserButton)(nil)
	_ externglib.Objector = (*ChooserButton)(nil)
)

func wrapChooserButton(obj *externglib.Object) *ChooserButton {
	return &ChooserButton{
		Button: gtk.Button{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: gtk.Actionable{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Activatable: gtk.Activatable{
				Object: obj,
			},
		},
	}
}

func marshalChooserButtonner(p uintptr) (interface{}, error) {
	return wrapChooserButton(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewChooserButton returns a new ChooserButton widget.
//
// The function returns the following values:
//
//    - chooserButton: ChooserButton widget.
//
func NewChooserButton() *ChooserButton {
	var _cret *C.GtkWidget // in

	_cret = C.bluetooth_chooser_button_new()

	var _chooserButton *ChooserButton // out

	_chooserButton = wrapChooserButton(externglib.Take(unsafe.Pointer(_cret)))

	return _chooserButton
}

// Available returns whether there is a powered Bluetooth adapter.
//
// The function returns the following values:
//
//    - ok: TRUE if there is a powered Bluetooth adapter available, and the
//      button should be sensitive.
//
func (button *ChooserButton) Available() bool {
	var _arg0 *C.BluetoothChooserButton // out
	var _cret C.gboolean                // in

	_arg0 = (*C.BluetoothChooserButton)(unsafe.Pointer(button.Native()))

	_cret = C.bluetooth_chooser_button_available(_arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
