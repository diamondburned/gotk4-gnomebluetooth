// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.bluetooth_settings_widget_get_type()), F: marshalSettingsWidgetter},
	})
}

// SettingsWidget: <structname>BluetoothSettingsWidget</structname> struct
// contains only private fields and should not be directly accessed.
type SettingsWidget struct {
	_ [0]func() // equal guard
	gtk.Box
}

var (
	_ gtk.Containerer     = (*SettingsWidget)(nil)
	_ externglib.Objector = (*SettingsWidget)(nil)
)

func wrapSettingsWidget(obj *externglib.Object) *SettingsWidget {
	return &SettingsWidget{
		Box: gtk.Box{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: gtk.Orientable{
				Object: obj,
			},
		},
	}
}

func marshalSettingsWidgetter(p uintptr) (interface{}, error) {
	return wrapSettingsWidget(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSettingsWidget returns a new SettingsWidget widget.
//
// The function returns the following values:
//
//    - settingsWidget: SettingsWidget widget.
//
func NewSettingsWidget() *SettingsWidget {
	var _cret *C.GtkWidget // in

	_cret = C.bluetooth_settings_widget_new()

	var _settingsWidget *SettingsWidget // out

	_settingsWidget = wrapSettingsWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _settingsWidget
}

// The function returns the following values:
//
//    - ok: whether the default Bluetooth adapter is powered.
//
func (widget *SettingsWidget) DefaultAdapterPowered() bool {
	var _arg0 *C.BluetoothSettingsWidget // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.BluetoothSettingsWidget)(unsafe.Pointer(widget.Native()))

	_cret = C.bluetooth_settings_widget_get_default_adapter_powered(_arg0)
	runtime.KeepAlive(widget)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
