// Code generated by girgen. DO NOT EDIT.

package gnomebluetooth

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// extern void _gotk4_gnomebluetooth1_SettingsWidget_ConnectAdapterStatusChanged(gpointer, guintptr);
// extern void _gotk4_gnomebluetooth1_SettingsWidget_ConnectPanelChanged(gpointer, gchar*, guintptr);
import "C"

// glib.Type values for bluetooth-settings-widget.go.
var GTypeSettingsWidget = externglib.Type(C.bluetooth_settings_widget_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSettingsWidget, F: marshalSettingsWidget},
	})
}

// SettingsWidgetOverrider contains methods that are overridable.
type SettingsWidgetOverrider interface {
}

// SettingsWidget: <structname>BluetoothSettingsWidget</structname> struct
// contains only private fields and should not be directly accessed.
type SettingsWidget struct {
	_ [0]func() // equal guard
	gtk.Box
}

var (
	_ gtk.Containerer     = (*SettingsWidget)(nil)
	_ externglib.Objector = (*SettingsWidget)(nil)
)

func classInitSettingsWidgetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSettingsWidget(obj *externglib.Object) *SettingsWidget {
	return &SettingsWidget{
		Box: gtk.Box{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: gtk.Orientable{
				Object: obj,
			},
		},
	}
}

func marshalSettingsWidget(p uintptr) (interface{}, error) {
	return wrapSettingsWidget(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gnomebluetooth1_SettingsWidget_ConnectAdapterStatusChanged
func _gotk4_gnomebluetooth1_SettingsWidget_ConnectAdapterStatusChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectAdapterStatusChanged signal is launched when the status of the adapter
// changes (powered, available, etc.).
func (widget *SettingsWidget) ConnectAdapterStatusChanged(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(widget, "adapter-status-changed", false, unsafe.Pointer(C._gotk4_gnomebluetooth1_SettingsWidget_ConnectAdapterStatusChanged), f)
}

//export _gotk4_gnomebluetooth1_SettingsWidget_ConnectPanelChanged
func _gotk4_gnomebluetooth1_SettingsWidget_ConnectPanelChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(panel string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(panel string))
	}

	var _panel string // out

	_panel = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_panel)
}

// ConnectPanelChanged signal is launched when a link to another settings panel
// is clicked.
func (widget *SettingsWidget) ConnectPanelChanged(f func(panel string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(widget, "panel-changed", false, unsafe.Pointer(C._gotk4_gnomebluetooth1_SettingsWidget_ConnectPanelChanged), f)
}

// NewSettingsWidget returns a new SettingsWidget widget.
//
// The function returns the following values:
//
//    - settingsWidget: SettingsWidget widget.
//
func NewSettingsWidget() *SettingsWidget {
	var _cret *C.GtkWidget // in

	_cret = C.bluetooth_settings_widget_new()

	var _settingsWidget *SettingsWidget // out

	_settingsWidget = wrapSettingsWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _settingsWidget
}

// The function returns the following values:
//
//    - ok: whether the default Bluetooth adapter is powered.
//
func (widget *SettingsWidget) DefaultAdapterPowered() bool {
	var _arg0 *C.BluetoothSettingsWidget // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.BluetoothSettingsWidget)(unsafe.Pointer(externglib.InternObject(widget).Native()))

	_cret = C.bluetooth_settings_widget_get_default_adapter_powered(_arg0)
	runtime.KeepAlive(widget)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
